<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chenxq.blog.personalBlog.Repository.UserMapper">
  <resultMap id="BaseResultMap" type="com.chenxq.blog.personalBlog.Domain.User">
    <id column="user_id" jdbcType="INTEGER" property="user_id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="lastloginip" jdbcType="VARCHAR" property="lastloginip" />
    <result column="lastlogintime" jdbcType="INTEGER" property="lastlogintime" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="realname" jdbcType="VARCHAR" property="realname" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, username, password, lastloginip, lastlogintime, email, realname, status
  </sql>
  <select id="selectByExample" parameterType="com.chenxq.blog.personalBlog.Domain.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{user_id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{user_id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByUsername" parameterType="java.lang.String">
    delete from user
    where username = #{username,jdbcType=VARCHAR}
  </delete>
  
  <insert id="insert" keyColumn="user_id" keyProperty="user_id" parameterType="com.chenxq.blog.personalBlog.Domain.User" useGeneratedKeys="true">
    insert into user (username, password, lastloginip, 
      lastlogintime, email, realname, 
      status)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{lastloginip,jdbcType=VARCHAR}, 
      #{lastlogintime,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, 
      #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" keyColumn="user_id" keyProperty="user_id" parameterType="com.chenxq.blog.personalBlog.Domain.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="lastloginip != null">
        lastloginip,
      </if>
      <if test="lastlogintime != null">
        lastlogintime,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="realname != null">
        realname,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="lastloginip != null">
        #{lastloginip,jdbcType=VARCHAR},
      </if>
      <if test="lastlogintime != null">
        #{lastlogintime,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="realname != null">
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.chenxq.blog.personalBlog.Domain.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="lastloginip != null">
        lastloginip = #{lastloginip,jdbcType=VARCHAR},
      </if>
      <if test="lastlogintime != null">
        lastlogintime = #{lastlogintime,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="realname != null">
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where user_id = #{user_id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chenxq.blog.personalBlog.Domain.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      lastloginip = #{lastloginip,jdbcType=VARCHAR},
      lastlogintime = #{lastlogintime,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where user_id = #{user_id,jdbcType=INTEGER}
  </update>
</mapper>